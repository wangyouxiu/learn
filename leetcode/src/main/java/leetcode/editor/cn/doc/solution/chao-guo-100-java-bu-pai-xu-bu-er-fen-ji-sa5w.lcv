### 解题思路

如果使用排序的话，时间复杂度会到达O(nlogn)，所以如果能不用，就尽力不用。
如果使用二分的话，每一次判断二分取到的值跟数组元素个数对比时，都要做一次遍历，时间复杂度也会到O(nlogn)。

---

理解题意后，我们发现，我们只关心每个数字个数，并不关心他们的位置，所以我们不排序，只统计数字。
统计数目的话，如果在有限范围内（本题的元素最大值是1000，可以使用），使用数组计数是最快的，比哈希表快。

我们不必创建一个长度是1001的数组，只需要创建一个长度是数组元素最大值加1的长度的数组counts，用来计数。

接下来我们分析答案的范围，如果答案存在，那么肯定是在 1 到 数组元素最大值之间。

再然后我们要思考是顺序遍历还是倒序遍历：
因为这道题是元素的个数要大于等于x，所以我们使用倒序遍历的方法，让x值最开始等于最大值，跟最大值的数目进行对比，然后递减，让元素个数累加，依次对比，能最快找到答案。

其实如果顺序遍历也可以，但是要提前统计出数组中所有元素的个数总和，然后随着x值的递增，在依次减去元素个数，再进行对比。

### 复杂度分析

时间复杂度：O(n)，由 O(min(nums.length, maxVal)) 推导出。
空间复杂度：O(n)，创建了一个用于计数的数组。

### 代码

* java

```java
class Solution {
    public int specialArray(int[] nums) {
        int maxVal = 0;
        for (int num : nums) {
            if (num > maxVal) {
                maxVal = num;
            }
        }
        int[] counts = new int[maxVal + 1];
        for (int num : nums) {
            counts[num] += 1;
        }

        int sum = 0;
        for (int i = maxVal; i >= 0; i--) {
            sum += counts[i];
            if (sum == i) {
                return i;
            }
        }
        return -1;
    }
}
```

![image.png](https://pic.leetcode-cn.com/1621061300-whUrwG-image.png)
