[本场周赛题解](https://cp-wiki.vercel.app/tutorial/leetcode/WC209/) | [我的LeetCode比赛题解](https://cp-wiki.vercel.app/tutorial/leetcode/)

### 方法一：暴力枚举特征值

枚举所有可能的特征值（最大为$N$），判断是否成立。

时间复杂度$O(N^2)$。

* cpp

```cpp
class Solution {
public:
    int specialArray(vector<int>& nums) {
        int n = nums.size();
        for (int i = 0; i <= n; ++i) {
            int cnt = 0;
            for (int num : nums)
                if (num >= i)
                    cnt++;
            if (cnt == i)
                return i;
        }
        return -1;
    }
};
```

### 方法二：排序+枚举特征值

先排序，然后枚举特征值，这样可以快速找到符合每个特征值的元素个数。

时间复杂度$O(N\log N)$。

* cpp

```cpp
class Solution {
public:
    int specialArray(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        for (int i = 0; i <= n; ++i) {
            int d = nums.end() - lower_bound(nums.begin(), nums.end(), i);
            if (d == i)
                return i;
        }
        return -1;
    }
};
```

### 方法三：计数数组后缀和

我们可以首先进行计数（$\geq N$的元素视为$N$，因为特征值最大为$N$），然后计算计数数组的后缀和，就可以直接得到不小于某一个数的元素个数。

时间复杂度$O(N)$。

* cpp

```cpp
class Solution {
public:
    int specialArray(vector<int>& nums) {
        int n = nums.size();
        vector<int> cnt(n + 1);
        for (int num : nums)
            cnt[min(num, n)]++;
        for (int i = n; i >= 0; --i) {
            if (i < n)
                cnt[i] += cnt[i + 1];
            if (cnt[i] == i)
                return i;
        }
        return -1;
    }
};
```

